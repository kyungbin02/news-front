import { NextRequest, NextResponse } from 'next/server';

// Î©îÎ™®Î¶¨ Í∏∞Î∞ò Î∂ÑÏÑù Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû•
const analyticsData = {
  categoryStats: {
    'it': { count: 0, totalClicks: 0, avgAccuracy: 0 },
    'sports': { count: 0, totalClicks: 0, avgAccuracy: 0 },
    'economy': { count: 0, totalClicks: 0, avgAccuracy: 0 }
  },
  aiAnalysisFeatures: [
    { feature: "ÌïµÏã¨ Ìè¨Ïù∏Ìä∏ Ï∂îÏ∂ú", description: "Îâ¥Ïä§Ïùò Í∞ÄÏû• Ï§ëÏöîÌïú ÎÇ¥Ïö©ÏùÑ ÌïúÎààÏóê", icon: "üéØ", accuracy: 95 },
    { feature: "Î∞∞Í≤Ω & Îß•ÎùΩ Î∂ÑÏÑù", description: "ÏÇ¨Í±¥Ïùò Î∞∞Í≤ΩÍ≥º Ï†ÑÌõÑ Îß•ÎùΩÏùÑ ÏÑ§Î™Ö", icon: "üìö", accuracy: 92 },
    { feature: "ÏòÅÌñ• & Ï†ÑÎßù ÏòàÏ∏°", description: "Îâ¥Ïä§Í∞Ä ÎØ∏Ïπ† ÏòÅÌñ•Í≥º Ìñ•ÌõÑ Ï†ÑÎßù", icon: "üìà", accuracy: 89 },
    { feature: "Í¥ÄÎ†® ÌÇ§ÏõåÎìú Ï∂îÏ∂ú", description: "Îâ¥Ïä§ÏôÄ Ïó∞Í¥ÄÎêú ÌïµÏã¨ ÌÇ§ÏõåÎìú Ï†úÍ≥µ", icon: "üè∑Ô∏è", accuracy: 97 }
  ],
  readingGuide: [
    {
      step: "1Îã®Í≥Ñ",
      title: "AI Î∂ÑÏÑù Í≤∞Í≥º ÌôïÏù∏",
      description: "ÌïµÏã¨ Ìè¨Ïù∏Ìä∏, Î∞∞Í≤Ω, ÏòÅÌñ•ÏùÑ Î®ºÏ†Ä ÌååÏïÖ",
      icon: "üß†",
      color: "bg-purple-500"
    },
    {
      step: "2Îã®Í≥Ñ", 
      title: "ÏõêÎ¨∏ ÎÇ¥Ïö© ÏùΩÍ∏∞",
      description: "AI Î∂ÑÏÑùÏùÑ Î∞îÌÉïÏúºÎ°ú Ï†ÑÏ≤¥ Í∏∞ÏÇ¨ Ïù¥Ìï¥",
      icon: "üìñ",
      color: "bg-blue-500"
    },
    {
      step: "3Îã®Í≥Ñ",
      title: "Í¥ÄÎ†® Îâ¥Ïä§ Ïó∞Í≤∞",
      description: "ÌÇ§ÏõåÎìúÎ°ú Ïó∞Í¥Ä Îâ¥Ïä§ÍπåÏßÄ ÌôïÏù∏",
      icon: "üîó",
      color: "bg-green-500"
    }
  ]
};

// Îâ¥Ïä§ Îç∞Ïù¥ÌÑ∞ÏóêÏÑú ÌÜµÍ≥Ñ ÏóÖÎç∞Ïù¥Ìä∏
export async function updateCategoryStats(category: string, clickCount: number = 1) {
  if (analyticsData.categoryStats[category]) {
    analyticsData.categoryStats[category].count += 1;
    analyticsData.categoryStats[category].totalClicks += clickCount;
    // Ï†ïÌôïÎèÑÎäî ÌÅ¥Î¶≠ ÏàòÏôÄ Îâ¥Ïä§ ÏàòÏùò ÎπÑÏú®Ïóê Îî∞Îùº Í≥ÑÏÇ∞ (ÏãúÎÆ¨Î†àÏù¥ÏÖò)
    const ratio = analyticsData.categoryStats[category].totalClicks / analyticsData.categoryStats[category].count;
    analyticsData.categoryStats[category].avgAccuracy = Math.min(98, 85 + ratio * 0.1);
  }
}

// Ìä∏Î†åÎî© ÌÜ†ÌîΩ ÏÉùÏÑ±
export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const type = searchParams.get('type') || 'all';

    switch (type) {
      case 'trending-topics':
        return NextResponse.json({
          trendingTopics: [
            {
              topic: "AI & Î®∏Ïã†Îü¨Îãù",
              description: "Ïù∏Í≥µÏßÄÎä• Í∏∞Ïà†Ïùò ÏµúÏã† ÎèôÌñ•Í≥º ÏÇ∞ÏóÖ Ï†ÅÏö© ÏÇ¨Î°Ä",
              articles: analyticsData.categoryStats.it.count || 156,
              color: "bg-gray-700",
              icon: "ü§ñ",
              category: "it"
            },
            {
              topic: "Ïä§Ìè¨Ï∏† & ÏóîÌÑ∞ÌÖåÏù∏Î®ºÌä∏",
              description: "Íµ≠ÎÇ¥Ïô∏ Ïä§Ìè¨Ï∏† ÏÜåÏãùÍ≥º ÏóîÌÑ∞ÌÖåÏù∏Î®ºÌä∏ Îâ¥Ïä§",
              articles: analyticsData.categoryStats.sports.count || 89,
              color: "bg-gray-600",
              icon: "üèÜ",
              category: "sports"
            },
            {
              topic: "Í≤ΩÏ†ú & Í∏àÏúµ",
              description: "Í∏ÄÎ°úÎ≤å Í≤ΩÏ†ú ÎèôÌñ•Í≥º Í∏àÏúµ ÏãúÏû• Î∂ÑÏÑù",
              articles: analyticsData.categoryStats.economy.count || 124,
              color: "bg-gray-800",
              icon: "üí∞",
              category: "economy"
            }
          ]
        });

      case 'ai-features':
        // AI Î∂ÑÏÑù ÌäπÏßïÏùò Ï†ïÌôïÎèÑÎ•º Ïã§ÏãúÍ∞Ñ Îç∞Ïù¥ÌÑ∞ Í∏∞Î∞òÏúºÎ°ú ÏóÖÎç∞Ïù¥Ìä∏
        const updatedFeatures = analyticsData.aiAnalysisFeatures.map(feature => ({
          ...feature,
          accuracy: Math.max(85, Math.min(98, feature.accuracy + (Math.random() - 0.5) * 2))
        }));
        
        return NextResponse.json({ aiFeatures: updatedFeatures });

      case 'reading-guide':
        return NextResponse.json({ readingGuide: analyticsData.readingGuide });

      case 'recommendations':
        // ÏÇ¨Ïö©Ïûê ÌÅ¥Î¶≠ Ìå®ÌÑ¥ Í∏∞Î∞ò Ï∂îÏ≤ú Ïπ¥ÌÖåÍ≥†Î¶¨ ÏÉùÏÑ±
        const totalClicks = Object.values(analyticsData.categoryStats).reduce((sum, stat) => sum + stat.totalClicks, 0);
        
        const recommendations = [
          { 
            category: "ÌÖåÌÅ¨", 
            icon: "üíª", 
            count: `${analyticsData.categoryStats.it.count || 24}Í∞ú`,
            color: "bg-gray-600",
            clicks: analyticsData.categoryStats.it.totalClicks
          },
          { 
            category: "Ïä§Ìè¨Ï∏†", 
            icon: "‚öΩ", 
            count: `${analyticsData.categoryStats.sports.count || 18}Í∞ú`,
            color: "bg-gray-600",
            clicks: analyticsData.categoryStats.sports.totalClicks
          },
          { 
            category: "Í≤ΩÏ†ú", 
            icon: "üìä", 
            count: `${analyticsData.categoryStats.economy.count || 31}Í∞ú`,
            color: "bg-gray-600",
            clicks: analyticsData.categoryStats.economy.totalClicks
          },
          { 
            category: "Î¨∏Ìôî", 
            icon: "üé®", 
            count: "12Í∞ú",
            color: "bg-gray-600",
            clicks: 0
          }
        ].sort((a, b) => b.clicks - a.clicks); // ÌÅ¥Î¶≠ Ïàò Í∏∞Ï§Ä Ï†ïÎ†¨

        return NextResponse.json({ recommendations });

      default:
        return NextResponse.json({
          categoryStats: analyticsData.categoryStats,
          totalArticles: Object.values(analyticsData.categoryStats).reduce((sum, stat) => sum + stat.count, 0),
          totalClicks: Object.values(analyticsData.categoryStats).reduce((sum, stat) => sum + stat.totalClicks, 0)
        });
    }
  } catch (error) {
    console.error('Error fetching analytics:', error);
    return NextResponse.json({ error: 'Failed to fetch analytics' }, { status: 500 });
  }
}

// Î∂ÑÏÑù Îç∞Ïù¥ÌÑ∞ ÏóÖÎç∞Ïù¥Ìä∏
export async function POST(request: NextRequest) {
  try {
    const { category, action } = await request.json();
    
    if (action === 'update_stats' && category) {
      await updateCategoryStats(category);
      return NextResponse.json({ success: true });
    }
    
    return NextResponse.json({ error: 'Invalid action' }, { status: 400 });
  } catch (error) {
    console.error('Error updating analytics:', error);
    return NextResponse.json({ error: 'Failed to update analytics' }, { status: 500 });
  }
}